name: Deployment

on:
  workflow_dispatch:
    inputs:
      forceDeployStage:
        description: 'Deploy to stage?'
        required: false
        default: false


  push:
    branches:
      - main
    # redeploy if a python file or infrastructure changed
    paths:
      - 'src/**/*.py'
      - 'infrastructure/**'
      - '.github/workflows/deployment.yml'

  # run PR validation if the infrastructure changed
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deployment.yml'

jobs:
  deploy-stage-infrastructure:
    name: "[Stage] Deploy Infrastructure"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment:
      name: stage
    defaults:
      run:
        working-directory: './infrastructure'
    env:
      TARGET_ENVIRONMENT: stage
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      TF_VAR_secret_1: ${{ secrets.SECRET_1 }}
      TF_VAR_secret_2: ${{ secrets.SECRET_2 }}
    outputs:
      function_app_one_name: ${{ steps.set-tf-output.outputs.function_app_one_name }}
      function_app_one_key: ${{ steps.set-tf-output.outputs.function_app_one_key }}

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config="${{ env.TARGET_ENVIRONMENT }}.tfbackend"

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -var-file="${{ env.TARGET_ENVIRONMENT }}.tfvars" -no-color -out=plan.tfdata

      - name: Terraform apply
        # Allow merges or dispatchs to be deployed to staging environment
        # To only allow merges we should use
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        if: github.event.input.forceDeployStage || github.event_name != 'pull_request'
        id: tf-apply
        run: terraform apply -auto-approve plan.tfdata

      - id: set-tf-output
        if: steps.tf-apply.outcome == 'success'
        name: Terraform get outputs
        run: |
          functionAppOneName=$(terraform output -raw function_app_one_name)
          echo "::set-output name=function_app_one_name::$functionAppOneName"
          echo "::set-output name=function_app_one_key::$(terraform output -raw function_app_one_key)"
          

  deploy-stage-function:
    name: "[Stage] Deploy ${{ needs.deploy-stage-infrastructure.outputs.function_app_one_name }}"
    if: github.event.input.forceDeployStage || github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [deploy-stage-infrastructure]
    environment:
      name: stage
    steps:
      - uses: actions/checkout@v2
        name: Checkout branch

      - name: Deploy Function One
        uses: ./.github/actions/deploy-az-func
        with:
          working-directory: './src/function_one'
          target-function-app: ${{ needs.deploy-stage-infrastructure.outputs.function_app_one_name }}
          az-rbac-credentials: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

  stage-end-to-end-tests:
    name: "[Stage] End to end tests"
    runs-on: ubuntu-latest
    needs: [deploy-stage-infrastructure, deploy-stage-function]
    environment:
      name: stage
    steps:
      - uses: actions/checkout@v2
        name: Checkout branch

      - name: Run tests
        uses: ./.github/actions/e2e-tests
        with:
          function_app_one_name: ${{ needs.deploy-stage-infrastructure.outputs.function_app_one_name }}
          function_app_one_key: ${{ needs.deploy-stage-infrastructure.outputs.function_app_one_key }}

  deploy-production-infrastructure:
    name: "[Production] Deploy Infrastructure"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [deploy-stage-infrastructure]
    environment:
      name: production
    defaults:
      run:
        working-directory: './infrastructure'
    outputs:
      function_app_one_name: ${{ steps.set-tf-output.outputs.function_app_one_name }}

    env:
      TARGET_ENVIRONMENT: production
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      TF_VAR_secret_1: ${{ secrets.SECRET_1 }}
      TF_VAR_secret_2: ${{ secrets.SECRET_2 }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config="${{ env.TARGET_ENVIRONMENT }}.tfbackend"

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -var-file="${{ env.TARGET_ENVIRONMENT }}.tfvars" -no-color -out=plan.tfdata

      - name: Terraform apply
        run: terraform apply -auto-approve plan.tfdata

      - id: set-tf-output
        name: Terraform get outputs
        run: |
          functionAppOneName=$(terraform output -raw function_app_one_name)
          echo "::set-output name=function_app_one_name::$functionAppOneName"

  deploy-production-function:
    name: "[Production] Deploy ${{ needs.deploy-production-infrastructure.outputs.function_app_one_name }}"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [deploy-production-infrastructure]
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
        name: Checkout branch

      - name: Deploy Function One
        uses: ./.github/actions/deploy-az-func
        with:
          working-directory: './src/function_one'
          target-function-app: ${{ needs.deploy-production-infrastructure.outputs.function_app_one_name }}
          az-rbac-credentials: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

  production-end-to-end-tests:
    name: "[Production] End to end tests"
    runs-on: ubuntu-latest
    needs: [deploy-production-infrastructure, deploy-production-function]
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
        name: Checkout branch

      - name: Run tests
        uses: ./.github/actions/e2e-tests
        with:
          function_app_one_name: ${{ needs.deploy-production-infrastructure.outputs.function_app_one_name }}
          function_app_one_key: ${{ needs.deploy-production-infrastructure.outputs.function_app_one_key }}
